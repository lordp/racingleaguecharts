<h1>Session Chart (<%= link_to('Back to main view', session_path(@session)) %>)</h1>
<h3><%= @session.name %></h3>

<ul class="nav nav-tabs">
  <li class="active"><a id="tab-laps" href="#container-laps" data-toggle="tab">Laps</a></li>
  <li><a id="tab-sectors" href="#container-sectors" data-toggle="tab">Sectors</a></li>
  <li><a id="tab-gaps" href="#container-gaps" data-toggle="tab">Gaps</a></li>
  <li><a id="tab-fuel" href="#container-fuel" data-toggle="tab">Fuel</a></li>
  <li><a id="tab-compare" href="#container-compare" data-toggle="tab">Compare</a></li>
</ul>

<div class="tab-content">
  <div class="tab-pane active chart" id="container-laps"></div>
  <div class="tab-pane chart" id="container-sectors"><%= "Sectors chart is only relevant if you're not comparing with another session" if @compare %></div>
  <div class="tab-pane chart" id="container-gaps"><%= "Gaps chart is only relevant if you're comparing with another session" unless @compare %></div>
  <div class="tab-pane chart" id="container-fuel"></div>
  <div class="tab-pane" id="container-compare">
    <fieldset>
      <legend>Filters</legend>
      <div class="form-group">
        <strong>Driver: </strong>
        <%= select_tag(:driver, options_from_collection_for_select(Driver.all, "id", "name"), { :multiple => true, :class => 'form-control select2 session-compare' }) %>
      </div>
      <div class="form-group">
        <strong>Track: </strong>
        <%= select_tag(:track, options_from_collection_for_select(Track.all, "id", "name"), { :multiple => true, :class => 'form-control select2 session-compare' }) %>
      </div>
      <div class="checkbox">
        <strong>Session Type: </strong>
        <%= label_tag('race') do %>
          <%= check_box_tag('race', 1, false, { :class => 'session-compare' }) %> Race
        <% end %>
        <%= label_tag('qualifying') do %>
          <%= check_box_tag('qualifying', 1, false, { :class => 'session-compare' }) %> Qualifying
        <% end %>
        <%= label_tag('one-shot-qualifying') do %>
          <%= check_box_tag('one-shot-qualifying', 1, false, { :class => 'session-compare' }) %> One-shot Qualifying
        <% end %>
        <%= label_tag('time-trial') do %>
          <%= check_box_tag('time-trial', 1, false, { :class => 'session-compare' }) %> Time Trial
        <% end %>
      </div>
    </fieldset>
    <table class="table table-striped table-condensed" id="session_list">
      <thead>
        <tr>
          <th>Driver</th>
          <th>Track</th>
          <th>Session Type</th>
          <th>Race</th>
          <th>Laps</th>
          <th>Date</th>
        </tr>
      </thead>
      <tbody>
      </tbody>
    </table>
  </div>
</div>

<script type="text/javascript">
  params = getQueryString();
  if (params.tab) {
    $('li.active').removeClass('active').parent().children().children('a#tab-' + params.tab).parent().addClass('active');

    $('.tab-pane').removeClass('active');
    $('#container-' + params.tab).addClass('active');
  }
  else {
    params.tab = 'laps';
  }

  var options = {
    chart: {
      type: 'spline'
    },
    title: {
      text: ""
    },
    plotOptions: {
      series: {
        animation: false
      },
      spline: {
        pointStart: 1
      }
    },
    xAxis: {
      tickInterval: 1,
      title: {
        text: 'Lap'
      }
    },
    yAxis: {
      title: {
        text: ''
      },
      labels: {
        formatter: function() {
          var t1 = Math.floor(this.value / 60);
          var t2 = Math.floor(this.value % 60);
          return t1 + 'm' + (t2 < 10 ? '0' + t2 : t2);
        }
      },
      plotLines: [{
        value: <%= @session.average_lap %>,
        color: 'red',
        width: 2
      }]
    },
    tooltip: {
      shared: true,
      formatter: graph_one_formatter
    },
    series: [{
      name: "<%= @session.name %>",
      data: [ <%= @session.laps.order(:lap_number).collect(&:total).join(",") %> ],
      color: '#7CB5EC',
      point: {
        events: {
          click: function() {
            var x = this.x;
            var l = $.map(this.series.data, function(l) { return l.x == x ? null : l.y });
            this.series.yAxis.plotLinesAndBands[0].options.value = array_sum(l) / l.length;
            this.remove(true, false);
          }
        }
      }
    }]
  };

<% if @compare %>
  options.series.push({
    name: "<%= @compare.name %>",
    data: [ <%= @compare.laps.order(:lap_number).collect(&:total).join(",") %> ],
    color: '#000000',
    point: {
      events: {
        click: function() {
          var x = this.x;
          var l = $.map(this.series.data, function(l) { return l.x == x ? null : l.y });
          this.series.yAxis.plotLinesAndBands[1].options.value = array_sum(l) / l.length;
          this.remove(true, false);
        }
      }
    }
  });
  options.yAxis.plotLines.push({
    value: <%= @compare.average_lap %>,
    color: 'green',
    width: 2
  });
<% end %>

  $('#container-laps').highcharts(options);

  // Fuel chart
  options.series = [{
    name: "<%= @session.name %>",
    data: [ <%= @session.laps.order(:lap_number).where('fuel is not null').collect { |l| l.fuel.round(3).to_f }.join(",") %> ],
    color: '#7CB5EC'
  }];

  <% if @compare %>
  options.series.push({
    name: "<%= @compare.name %>",
    data: [ <%= @compare.laps.order(:lap_number).where('fuel is not null').collect { |l| l.fuel.round(3).to_f }.join(",") %> ],
    color: '#000000'
  });
  <% end %>

  options.tooltip.formatter = graph_two_formatter;
  delete options.yAxis.labels.formatter;
  delete options.yAxis.plotLines;

  $('#container-fuel').highcharts(options);

  // Gaps chart
  <% if @compare %>
  options.series = [];
  delete options.yAxis.plotLines;
  var data = [{
    name: "<%= @session.name %>",
    laps: [ <%= @session.laps.order(:lap_number).collect(&:total).join(",") %> ]
  }];

  var winner_average;
    <% if @compare.laps.size > @session.laps.size || @compare.laps.sum(:total) < @session.laps.sum(:total) %>
  data.unshift({
    name: "<%= @compare.name %>",
    laps: [ <%= @compare.laps.order(:lap_number).collect { |l| l.total.round(3).to_f }.join(",") %> ],
    color: '#000000'
  });
  winner_average = <%= @compare.average_lap %>;
    <% else %>
  data.push({
    name: "<%= @compare.name %>",
    laps: [ <%= @compare.laps.order(:lap_number).collect { |l| l.total.round(3).to_f }.join(",") %> ],
    color: '#000000'
  });
  winner_average = <%= @session.average_lap %>;
    <% end %>

  // Figure out the gaps between each driver and the winning time
  $.each(data, function (i, driver) {
    driver.data = [];
    driver.average = [];
    $.each(driver.laps, function (i, lap) {
      // First lap is handled separately
      if (i == 0) {
        driver.average.push(lap);
      }
      // Other laps are added together as you go
      else {
        laps_slice = [];
        $.each(driver.laps.slice(0, i + 1), function (i, lap) {
          laps_slice.push(lap);
        });
        driver.average.push(array_sum(laps_slice));
      }

      // Keep a track of the difference
      driver.data.push(((winner_average * (i + 1)) - driver.average[i]));
    });

    // Hide or show drivers if applicable.
    if (hide_driver(params, driver.name)) {
      driver.visible = false;
    }

    options.series.push(driver);
  });

  // Change the tooltip formatter, chart title and y-axis title options
  options.tooltip.formatter = graph_two_formatter;
  options.title.text = "Gaps to winner";
  options.yAxis.title.text = 'Gap';

  // Instruct highcharts to render this chart
  $('#container-gaps').highcharts(options);
  <% else %>

  options.chart.type = 'areaspline';
  options.plotOptions.areaspline = {
    stacking: 'normal',
    pointStart: 1,
    lineColor: '#666666',
    lineWidth: 1,
    marker: {
      enabled: false
    }
  };
  options.xAxis.tickInterval = 1;

  options.series = [
    { name: 'Sector 3', data: [ <%= @session.laps.order(:lap_number).collect(&:sector_3).join(",") %> ] },
    { name: 'Sector 2', data: [ <%= @session.laps.order(:lap_number).collect(&:sector_2).join(",") %> ] },
    { name: 'Sector 1', data: [ <%= @session.laps.order(:lap_number).collect(&:sector_1).join(",") %> ] }
  ];

  options.tooltip.formatter = function() {
    var s = '<b>Lap ' + this.x + '</b>';
    var total = 0;

    $.each(this.points, function (i, point) {
      // Converts seconds to mm:ss.ddd format - ie 106.322 = 1:46.322
      s += '<br/><span style="color: ' + point.series.color + ';">' + point.series.name + '</span>: ' + convert_seconds_to_lap(point.y, true);
      total += point.y;
    });

    s += '<br/><strong>Total: </strong>' + convert_seconds_to_lap(total, true);
    return s;
  };

  $('#container-sectors').highcharts(options);

  <% end %>
</script>
